# Ruff Configuration for {{ project_name|default("FastAPI Project") }}
# Auto-generated by Scoffy

# Target Python version
target-version = "py{{ python_version|default('3.12') }}"

# Line length configuration
line-length = {{ line_length|default(88) }}

# Enable rules by default
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "ARG", # flake8-unused-arguments
  "ERA", # eradicate
  "PL",  # pylint
  "PERF", # perflint
{% if additional_rules %}
{% for rule in additional_rules %}
  "{{ rule }}",
{% endfor %}
{% endif %}
]

# Ignored rules
ignore = [
{% if ignore_rules %}
{% for rule in ignore_rules %}
  "{{ rule }}",
{% endfor %}
{% else %}
  "E203",  # whitespace before ':' - conflicts with black
  "E501",  # line too long - handled by formatter
{% endif %}
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
{% if exclude_dirs %}
{% for dir in exclude_dirs %}
  "{{ dir }}",
{% endfor %}
{% endif %}
]

# Same as Black
indent-width = 4

# Assume Python 3.12
lint.preview = true

# Formatter configuration
[format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

# Isort configuration for imports ordering
[lint.isort]
known-first-party = ["{{ app_name|default('app') }}", "tests"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

# Settings for specific rules
[lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query", "fastapi.Path", "fastapi.Body"]

{% if use_pydantic %}
[lint.pydocstyle]
convention = "{{ docstring_convention|default('google') }}"

[lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]
{% endif %}

{% if per_file_ignores %}
[lint.per-file-ignores]
{% for file, ignores in per_file_ignores.items() %}
"{{ file }}" = [{% for rule in ignores %}"{{ rule }}"{% if not loop.last %}, {% endif %}{% endfor %}]
{% endfor %}
{% else %}
# Ignore specific rules for tests and init files
[lint.per-file-ignores]
"tests/*" = ["ARG001", "PLR2004", "S101"]
"__init__.py" = ["E402", "F401"]
{% endif %}

{% if mccabe %}
# Complexity configuration
[lint.mccabe]
max-complexity = {{ mccabe.max_complexity|default(10) }}
{% endif %}

{% if pylint %}
# Pylint specific configuration
[lint.pylint]
max-args = {{ pylint.max_args|default(5) }}
max-returns = {{ pylint.max_returns|default(3) }}
{% endif %}
