 # Pytest Configuration for {{ project_name|default("FastAPI Project") }}
# Auto-generated by Scoffy

[pytest]
# Test discovery pattern
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Pytest options
testpaths = {{ testpaths|default("tests") }}
norecursedirs = {{ norecursedirs|default("env venv .env .venv node_modules .git __pycache__ .pytest_cache") }}
filterwarnings = {{ filterwarnings|default("ignore::DeprecationWarning") }}

# Verbose output
{% if verbose|default(True) %}
verbosity = {{ verbosity|default(2) }}
{% endif %}

# Show local variables on failure
{% if showlocals|default(True) %}
showlocals = True
{% endif %}

# Show slowest tests
{% if durations|default(True) %}
durations = {{ durations_number|default(10) }}
{% endif %}

# xvs (Expected vs actual) on assertion failures
xvs = True

# Parallel execution
{% if parallel|default(False) %}
addopts = -xvs {{ addopts|default("") }} --numprocesses={{ numprocesses|default("auto") }}
{% else %}
addopts = -xvs {{ addopts|default("") }}
{% endif %}

{% if cache_dir %}
# Cache directory
cache_dir = {{ cache_dir }}
{% endif %}

# Markers (custom test categories)
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    e2e: end-to-end tests that require full system setup
    api: API endpoint tests
    unit: unit tests (default if not marked)
    db: tests that require database access
{% if custom_markers %}
{% for marker, description in custom_markers.items() %}
    {{ marker }}: {{ description }}
{% endfor %}
{% endif %}

# Logging configuration
{% if configure_logging|default(True) %}
log_cli = {{ log_cli|default("True") }}
log_cli_level = {{ log_cli_level|default("INFO") }}
log_cli_format = {{ log_cli_format|default("%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)") }}
log_cli_date_format = {{ log_cli_date_format|default("%Y-%m-%d %H:%M:%S") }}
{% endif %}

{% if junit_logging %}
# JUnit XML logging
junit_logging = {{ junit_logging }}
{% endif %}

# Environment variables
{% if env_vars %}
env =
{% for key, value in env_vars.items() %}
    {{ key }}={{ value }}
{% endfor %}
{% endif %}

# Coverage configuration (if pytest-cov is installed)
{% if enable_coverage|default(True) %}
[tool:pytest]
{% if cover_pylib %}
cover_pylib = True
{% endif %}
minversion = {{ minversion|default("6.0") }}
{% if enable_coverage %}
addopts = {{ coverage_addopts|default("--cov=" + app_name|default("app") + " --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html:htmlcov") }} {{ addopts|default("") }}
{% endif %}
{% endif %}
